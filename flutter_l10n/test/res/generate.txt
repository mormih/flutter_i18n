import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

part 'strings_ar.dart';
part 'strings_bg.dart';
part 'strings_bs.dart';
part 'strings_ca.dart';
part 'strings_cs.dart';
part 'strings_da.dart';
part 'strings_de.dart';
part 'strings_de_CH.dart';
part 'strings_el.dart';
part 'strings_en.dart';
part 'strings_en_AU.dart';
part 'strings_en_CA.dart';
part 'strings_en_GB.dart';
part 'strings_en_IE.dart';
part 'strings_en_IN.dart';
part 'strings_en_SG.dart';
part 'strings_en_ZA.dart';
part 'strings_es.dart';
part 'strings_es_419.dart';
part 'strings_es_AR.dart';
part 'strings_es_BO.dart';
part 'strings_es_CL.dart';
part 'strings_es_CO.dart';
part 'strings_es_CR.dart';
part 'strings_es_DO.dart';
part 'strings_es_EC.dart';
part 'strings_es_GT.dart';
part 'strings_es_HN.dart';
part 'strings_es_MX.dart';
part 'strings_es_NI.dart';
part 'strings_es_PA.dart';
part 'strings_es_PE.dart';
part 'strings_es_PR.dart';
part 'strings_es_PY.dart';
part 'strings_es_SV.dart';
part 'strings_es_US.dart';
part 'strings_es_UY.dart';
part 'strings_es_VE.dart';
part 'strings_et.dart';
part 'strings_fa.dart';
part 'strings_fi.dart';
part 'strings_fil.dart';
part 'strings_fr.dart';
part 'strings_fr_CA.dart';
part 'strings_gsw.dart';
part 'strings_he.dart';
part 'strings_hi.dart';
part 'strings_hr.dart';
part 'strings_hu.dart';
part 'strings_id.dart';
part 'strings_it.dart';
part 'strings_iw.dart';
part 'strings_ja.dart';
part 'strings_km.dart';
part 'strings_ko.dart';
part 'strings_lt.dart';
part 'strings_lv.dart';
part 'strings_mn.dart';
part 'strings_mr.dart';
part 'strings_ms.dart';
part 'strings_nb.dart';
part 'strings_nl.dart';
part 'strings_pl.dart';
part 'strings_ps.dart';
part 'strings_pt.dart';
part 'strings_pt_PT.dart';
part 'strings_ro.dart';
part 'strings_ru.dart';
part 'strings_sk.dart';
part 'strings_sl.dart';
part 'strings_sr.dart';
part 'strings_sr_Latn.dart';
part 'strings_sv.dart';
part 'strings_ta.dart';
part 'strings_th.dart';
part 'strings_tl.dart';
part 'strings_tr.dart';
part 'strings_uk.dart';
part 'strings_ur.dart';
part 'strings_vi.dart';
part 'strings_zh.dart';
part 'strings_zh_HK.dart';
part 'strings_zh_TW.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get alertDialogLabel => "Alert";
  String get anteMeridiemAbbreviation => "AM";
  String get app_name => "";
  String get backButtonTooltip => "Back";
  String get cancelButtonLabel => "CANCEL";
  String get closeButtonLabel => "CLOSE";
  String get closeButtonTooltip => "Close";
  String get collapsedIconTapHint => "Expand";
  String get continueButtonLabel => "CONTINUE";
  String get copyButtonLabel => "COPY";
  String get cutButtonLabel => "CUT";
  String get deleteButtonTooltip => "Delete";
  String get dialogLabel => "Dialog";
  String get drawerLabel => "Navigation menu";
  String get expandedIconTapHint => "Collapse";
  String get hideAccountsLabel => "Hide accounts";
  String get licensesPageTitle => "Licenses";
  String get modalBarrierDismissLabel => "Dismiss";
  String get nextMonthTooltip => "Next month";
  String get nextPageTooltip => "Next page";
  String get okButtonLabel => "OK";
  String get openAppDrawerTooltip => "Open navigation menu";
  String get pasteButtonLabel => "PASTE";
  String get popupMenuLabel => "Popup menu";
  String get postMeridiemAbbreviation => "PM";
  String get previousMonthTooltip => "Previous month";
  String get previousPageTooltip => "Previous page";
  String get refreshIndicatorSemanticLabel => "Refresh";
  String get reorderItemDown => "Move down";
  String get reorderItemLeft => "Move left";
  String get reorderItemRight => "Move right";
  String get reorderItemToEnd => "Move to the end";
  String get reorderItemToStart => "Move to the start";
  String get reorderItemUp => "Move up";
  String get rowsPerPageTitle => "Rows per page:";
  String get scriptCategory => "English-like";
  String get searchFieldLabel => "Search";
  String get selectAllButtonLabel => "SELECT ALL";
  String get showAccountsLabel => "Show accounts";
  String get showMenuTooltip => "Show menu";
  String get signedInLabel => "Signed in";
  String get timeOfDayFormat => "h:mm a";
  String get timePickerHourModeAnnouncement => "Select hours";
  String get timePickerMinuteModeAnnouncement => "Select minutes";
  String get viewLicensesButtonLabel => "VIEW LICENSES";

  String aboutListTileTitle(dynamic applicationName) => "About $applicationName";
  String pageRowsInfoTitle(dynamic firstRow, dynamic lastRow, dynamic rowCount) => "$firstRow–$lastRow of $rowCount";
  String pageRowsInfoTitleApproximate(dynamic firstRow, dynamic lastRow, dynamic rowCount) => "$firstRow–$lastRow of about $rowCount";
  String tabLabel(dynamic tabIndex, dynamic tabCount) => "Tab \$$tabIndex of $tabCount";

  String remainingTextFieldCharacterCount(dynamic remainingCount) {
    switch (remainingCount.toString().toLowerCase()) {
      case "0":
        return "No characters remaining";
      case "1":
        return "1 character remaining";
      default:
        return "$remainingCount characters remaining";
    }
  }
  String selectedRowCountTitle(dynamic selectedRowCount) {
    switch (selectedRowCount.toString().toLowerCase()) {
      case "0":
        return "No items selected";
      case "1":
        return "1 item selected";
      default:
        return "$selectedRowCount items selected";
    }
  }
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ar", ""),
      Locale("bg", ""),
      Locale("bs", ""),
      Locale("ca", ""),
      Locale("cs", ""),
      Locale("da", ""),
      Locale("de", ""),
      Locale("de", "CH"),
      Locale("el", ""),
      Locale("en", ""),
      Locale("en", "AU"),
      Locale("en", "CA"),
      Locale("en", "GB"),
      Locale("en", "IE"),
      Locale("en", "IN"),
      Locale("en", "SG"),
      Locale("en", "ZA"),
      Locale("es", ""),
      Locale("es", "419"),
      Locale("es", "AR"),
      Locale("es", "BO"),
      Locale("es", "CL"),
      Locale("es", "CO"),
      Locale("es", "CR"),
      Locale("es", "DO"),
      Locale("es", "EC"),
      Locale("es", "GT"),
      Locale("es", "HN"),
      Locale("es", "MX"),
      Locale("es", "NI"),
      Locale("es", "PA"),
      Locale("es", "PE"),
      Locale("es", "PR"),
      Locale("es", "PY"),
      Locale("es", "SV"),
      Locale("es", "US"),
      Locale("es", "UY"),
      Locale("es", "VE"),
      Locale("et", ""),
      Locale("fa", ""),
      Locale("fi", ""),
      Locale("fil", ""),
      Locale("fr", ""),
      Locale("fr", "CA"),
      Locale("gsw", ""),
      Locale("he", ""),
      Locale("hi", ""),
      Locale("hr", ""),
      Locale("hu", ""),
      Locale("id", ""),
      Locale("it", ""),
      Locale("he", "IL"),
      Locale("ja", ""),
      Locale("km", ""),
      Locale("ko", ""),
      Locale("lt", ""),
      Locale("lv", ""),
      Locale("mn", ""),
      Locale("mr", ""),
      Locale("ms", ""),
      Locale("nb", ""),
      Locale("nl", ""),
      Locale("pl", ""),
      Locale("ps", ""),
      Locale("pt", ""),
      Locale("pt", "PT"),
      Locale("ro", ""),
      Locale("ru", ""),
      Locale("sk", ""),
      Locale("sl", ""),
      Locale("sr", ""),
      Locale("sr", "Latn"),
      Locale("sv", ""),
      Locale("ta", ""),
      Locale("th", ""),
      Locale("tl", ""),
      Locale("tr", ""),
      Locale("uk", ""),
      Locale("ur", ""),
      Locale("vi", ""),
      Locale("zh", ""),
      Locale("zh", "HK"),
      Locale("zh", "TW"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ar":
          S.current = const $ar();
          return SynchronousFuture<S>(S.current);
        case "bg":
          S.current = const $bg();
          return SynchronousFuture<S>(S.current);
        case "bs":
          S.current = const $bs();
          return SynchronousFuture<S>(S.current);
        case "ca":
          S.current = const $ca();
          return SynchronousFuture<S>(S.current);
        case "cs":
          S.current = const $cs();
          return SynchronousFuture<S>(S.current);
        case "da":
          S.current = const $da();
          return SynchronousFuture<S>(S.current);
        case "de":
          S.current = const $de();
          return SynchronousFuture<S>(S.current);
        case "de_CH":
          S.current = const $de_CH();
          return SynchronousFuture<S>(S.current);
        case "el":
          S.current = const $el();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "en_AU":
          S.current = const $en_AU();
          return SynchronousFuture<S>(S.current);
        case "en_CA":
          S.current = const $en_CA();
          return SynchronousFuture<S>(S.current);
        case "en_GB":
          S.current = const $en_GB();
          return SynchronousFuture<S>(S.current);
        case "en_IE":
          S.current = const $en_IE();
          return SynchronousFuture<S>(S.current);
        case "en_IN":
          S.current = const $en_IN();
          return SynchronousFuture<S>(S.current);
        case "en_SG":
          S.current = const $en_SG();
          return SynchronousFuture<S>(S.current);
        case "en_ZA":
          S.current = const $en_ZA();
          return SynchronousFuture<S>(S.current);
        case "es":
          S.current = const $es();
          return SynchronousFuture<S>(S.current);
        case "es_419":
          S.current = const $es_419();
          return SynchronousFuture<S>(S.current);
        case "es_AR":
          S.current = const $es_AR();
          return SynchronousFuture<S>(S.current);
        case "es_BO":
          S.current = const $es_BO();
          return SynchronousFuture<S>(S.current);
        case "es_CL":
          S.current = const $es_CL();
          return SynchronousFuture<S>(S.current);
        case "es_CO":
          S.current = const $es_CO();
          return SynchronousFuture<S>(S.current);
        case "es_CR":
          S.current = const $es_CR();
          return SynchronousFuture<S>(S.current);
        case "es_DO":
          S.current = const $es_DO();
          return SynchronousFuture<S>(S.current);
        case "es_EC":
          S.current = const $es_EC();
          return SynchronousFuture<S>(S.current);
        case "es_GT":
          S.current = const $es_GT();
          return SynchronousFuture<S>(S.current);
        case "es_HN":
          S.current = const $es_HN();
          return SynchronousFuture<S>(S.current);
        case "es_MX":
          S.current = const $es_MX();
          return SynchronousFuture<S>(S.current);
        case "es_NI":
          S.current = const $es_NI();
          return SynchronousFuture<S>(S.current);
        case "es_PA":
          S.current = const $es_PA();
          return SynchronousFuture<S>(S.current);
        case "es_PE":
          S.current = const $es_PE();
          return SynchronousFuture<S>(S.current);
        case "es_PR":
          S.current = const $es_PR();
          return SynchronousFuture<S>(S.current);
        case "es_PY":
          S.current = const $es_PY();
          return SynchronousFuture<S>(S.current);
        case "es_SV":
          S.current = const $es_SV();
          return SynchronousFuture<S>(S.current);
        case "es_US":
          S.current = const $es_US();
          return SynchronousFuture<S>(S.current);
        case "es_UY":
          S.current = const $es_UY();
          return SynchronousFuture<S>(S.current);
        case "es_VE":
          S.current = const $es_VE();
          return SynchronousFuture<S>(S.current);
        case "et":
          S.current = const $et();
          return SynchronousFuture<S>(S.current);
        case "fa":
          S.current = const $fa();
          return SynchronousFuture<S>(S.current);
        case "fi":
          S.current = const $fi();
          return SynchronousFuture<S>(S.current);
        case "fil":
          S.current = const $fil();
          return SynchronousFuture<S>(S.current);
        case "fr":
          S.current = const $fr();
          return SynchronousFuture<S>(S.current);
        case "fr_CA":
          S.current = const $fr_CA();
          return SynchronousFuture<S>(S.current);
        case "gsw":
          S.current = const $gsw();
          return SynchronousFuture<S>(S.current);
        case "he":
          S.current = const $he();
          return SynchronousFuture<S>(S.current);
        case "hi":
          S.current = const $hi();
          return SynchronousFuture<S>(S.current);
        case "hr":
          S.current = const $hr();
          return SynchronousFuture<S>(S.current);
        case "hu":
          S.current = const $hu();
          return SynchronousFuture<S>(S.current);
        case "id":
          S.current = const $id();
          return SynchronousFuture<S>(S.current);
        case "it":
          S.current = const $it();
          return SynchronousFuture<S>(S.current);
        case "iw_IL":
        case "he_IL":
          S.current = const $he_IL();
          return SynchronousFuture<S>(S.current);
        case "ja":
          S.current = const $ja();
          return SynchronousFuture<S>(S.current);
        case "km":
          S.current = const $km();
          return SynchronousFuture<S>(S.current);
        case "ko":
          S.current = const $ko();
          return SynchronousFuture<S>(S.current);
        case "lt":
          S.current = const $lt();
          return SynchronousFuture<S>(S.current);
        case "lv":
          S.current = const $lv();
          return SynchronousFuture<S>(S.current);
        case "mn":
          S.current = const $mn();
          return SynchronousFuture<S>(S.current);
        case "mr":
          S.current = const $mr();
          return SynchronousFuture<S>(S.current);
        case "ms":
          S.current = const $ms();
          return SynchronousFuture<S>(S.current);
        case "nb":
          S.current = const $nb();
          return SynchronousFuture<S>(S.current);
        case "nl":
          S.current = const $nl();
          return SynchronousFuture<S>(S.current);
        case "pl":
          S.current = const $pl();
          return SynchronousFuture<S>(S.current);
        case "ps":
          S.current = const $ps();
          return SynchronousFuture<S>(S.current);
        case "pt":
          S.current = const $pt();
          return SynchronousFuture<S>(S.current);
        case "pt_PT":
          S.current = const $pt_PT();
          return SynchronousFuture<S>(S.current);
        case "ro":
          S.current = const $ro();
          return SynchronousFuture<S>(S.current);
        case "ru":
          S.current = const $ru();
          return SynchronousFuture<S>(S.current);
        case "sk":
          S.current = const $sk();
          return SynchronousFuture<S>(S.current);
        case "sl":
          S.current = const $sl();
          return SynchronousFuture<S>(S.current);
        case "sr":
          S.current = const $sr();
          return SynchronousFuture<S>(S.current);
        case "sr_Latn":
          S.current = const $sr_Latn();
          return SynchronousFuture<S>(S.current);
        case "sv":
          S.current = const $sv();
          return SynchronousFuture<S>(S.current);
        case "ta":
          S.current = const $ta();
          return SynchronousFuture<S>(S.current);
        case "th":
          S.current = const $th();
          return SynchronousFuture<S>(S.current);
        case "tl":
          S.current = const $tl();
          return SynchronousFuture<S>(S.current);
        case "tr":
          S.current = const $tr();
          return SynchronousFuture<S>(S.current);
        case "uk":
          S.current = const $uk();
          return SynchronousFuture<S>(S.current);
        case "ur":
          S.current = const $ur();
          return SynchronousFuture<S>(S.current);
        case "vi":
          S.current = const $vi();
          return SynchronousFuture<S>(S.current);
        case "zh":
          S.current = const $zh();
          return SynchronousFuture<S>(S.current);
        case "zh_HK":
          S.current = const $zh_HK();
          return SynchronousFuture<S>(S.current);
        case "zh_TW":
          S.current = const $zh_TW();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  /// Internal method to resolve a locale from a list of locales.
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  /// Returns true if the specified locale is supported, false otherwise.
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (!withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
